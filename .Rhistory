f = 0.7  # maximum fraction of oxygen transfered from blood to tissue
b = 0.0357 # ml blood /(beat 100 ml muscle)-1
Odemand = 0.11*1.43 # mg O2 (100 ml muscle minute)-1
Omax = 10 # max oxygen content in mg O2/100ml
timesteps = 120 # run each simulation for 120 timesteps (minutes)
O = numeric(timesteps) # vector for the results of the simulations of muscle oxygen content
O[1] = 5 # initial oxygen content for the models is 5 mg O2/100ml
# multiple model simulations follow to calculate muscle oxygen content
# with different input heart rates and activity levels for 120 minutes each; https://campus.datacamp.com/courses/intermediate-r-for-finance/loops-3?ex=9
# and an initial muscle oxygen content of 5 mg O2
# muscle oxygen content is updated each minute based on previous muscle oxygen content
# first simulation model inputs
Hrate = 72 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 1 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Demand = Odemand*Alevel
O[i] = O[i-1]+Supply-Demand
}
# second simulation model inputs
O2 = 0 #results of the second simulation of muscle oxygen content
Hrate = 148 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 2.5 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O2[i-1]/Omax)
Demand = Odemand*Alevel
O2[i] = O2[i-1]+Supply-Demand
}
# plot the results of each simulation to compare the change in muscle oxygen content over time
# depending on the input heart rate and activity level
# https://www.datacamp.com/community/tutorials/15-questions-about-r-plots
plot(O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10)) # first simulation results, line colored black
lines(O2, col='red') # second simulation results, line colored red
abline(h=1.2, lty=3) # draw a horizontal line at 1.2 = 1/(273*8.3e3)*1000*100*32; this assumes 100 ml skeletal muscle
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
# model for simulating muscle oxygen content depending on activity level (exercise) and heart rate
# model parameters; https://data-flair.training/blogs/r-vector/
# 1 ml O2 is 1.43 mg O2 at Standard Temperature and Pressure
Oblood = 0.2*1.43 # mg O2 (ml blood)-1
f = 0.7  # maximum fraction of oxygen transfered from blood to tissue
b = 0.0357 # ml blood /(beat 100 ml muscle)-1
Odemand = 0.11*1.43 # mg O2 (100 ml muscle minute)-1
Omax = 10 # max oxygen content in mg O2/100ml
timesteps = 120 # run each simulation for 120 timesteps (minutes)
O = numeric(timesteps) # vector for the results of the simulations of muscle oxygen content
O[1] = 5 # initial oxygen content for the models is 5 mg O2/100ml
# multiple model simulations follow to calculate muscle oxygen content
# with different input heart rates and activity levels for 120 minutes each; https://campus.datacamp.com/courses/intermediate-r-for-finance/loops-3?ex=9
# and an initial muscle oxygen content of 5 mg O2
# muscle oxygen content is updated each minute based on previous muscle oxygen content
# first simulation model inputs
Hrate = 72 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 1 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Demand = Odemand*Alevel
O[i] = O[i-1]+Supply-Demand
}
# second simulation model inputs
O2 = 0 #results of the second simulation of muscle oxygen content
Hrate = 148 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 2.5 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O2[i-1]/Omax)
Demand = Odemand*Alevel
O2[i] = O2[i-1]+Supply-Demand
}
# plot the results of each simulation to compare the change in muscle oxygen content over time
# depending on the input heart rate and activity level
# https://www.datacamp.com/community/tutorials/15-questions-about-r-plots
plot(O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10)) # first simulation results, line colored black
lines(O2, col='red') # second simulation results, line colored red
abline(h=1.2, lty=3) # draw a horizontal line at 1.2 = 1/(273*8.3e3)*1000*100*32; this assumes 100 ml skeletal muscle
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
# model for simulating muscle oxygen content depending on activity level (exercise) and heart rate
# model parameters; https://data-flair.training/blogs/r-vector/
# 1 ml O2 is 1.43 mg O2 at Standard Temperature and Pressure
Oblood = 0.2*1.43 # mg O2 (ml blood)-1
f = 0.7  # maximum fraction of oxygen transfered from blood to tissue
b = 0.0357 # ml blood /(beat 100 ml muscle)-1
Odemand = 0.11*1.43 # mg O2 (100 ml muscle minute)-1
Omax = 10 # max oxygen content in mg O2/100ml
timesteps = 120 # run each simulation for 120 timesteps (minutes)
O = numeric(timesteps) # vector for the results of the simulations of muscle oxygen content
O[1] = 5 # initial oxygen content for the models is 5 mg O2/100ml
# multiple model simulations follow to calculate muscle oxygen content
# with different input heart rates and activity levels for 120 minutes each; https://campus.datacamp.com/courses/intermediate-r-for-finance/loops-3?ex=9
# and an initial muscle oxygen content of 5 mg O2
# muscle oxygen content is updated each minute based on previous muscle oxygen content
# first simulation model inputs
Hrate = 72 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 1 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Demand = Odemand*Alevel
O[i] = O[i-1]+Supply-Demand
}
# second simulation model inputs
O2 = O #results of the second simulation of muscle oxygen content
Hrate = 148 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 2.5 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O2[i-1]/Omax)
Demand = Odemand*Alevel
O2[i] = O2[i-1]+Supply-Demand
}
# plot the results of each simulation to compare the change in muscle oxygen content over time
# depending on the input heart rate and activity level
# https://www.datacamp.com/community/tutorials/15-questions-about-r-plots
plot(O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10)) # first simulation results, line colored black
lines(O2, col='red') # second simulation results, line colored red
abline(h=1.2, lty=3) # draw a horizontal line at 1.2 = 1/(273*8.3e3)*1000*100*32; this assumes 100 ml skeletal muscle
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
# model for simulating muscle oxygen content depending on activity level (exercise) and heart rate
# model parameters; https://data-flair.training/blogs/r-vector/
# 1 ml O2 is 1.43 mg O2 at Standard Temperature and Pressure
Oblood = 0.2*1.43 # mg O2 (ml blood)-1
f = 0.7  # maximum fraction of oxygen transfered from blood to tissue
b = 0.0357 # ml blood /(beat 100 ml muscle)-1
Odemand = 0.11*1.43 # mg O2 (100 ml muscle minute)-1
Omax = 10 # max oxygen content in mg O2/100ml
timesteps = 120 # run each simulation for 120 timesteps (minutes)
O = numeric(timesteps) # vector for the results of the simulations of muscle oxygen content
O[1] = 5 # initial oxygen content for the models is 5 mg O2/100ml
# multiple model simulations follow to calculate muscle oxygen content
# with different input heart rates and activity levels for 120 minutes each; https://campus.datacamp.com/courses/intermediate-r-for-finance/loops-3?ex=9
# and an initial muscle oxygen content of 5 mg O2
# muscle oxygen content is updated each minute based on previous muscle oxygen content
# first simulation model inputs
Hrate = 72 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 1 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Demand = Odemand*Alevel
O[i] = O[i-1]+Supply-Demand
}
# second simulation model inputs
O2 = O #results of the second simulation of muscle oxygen content
Hrate = 72 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 2.5 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O2[i-1]/Omax)
Demand = Odemand*Alevel
O2[i] = O2[i-1]+Supply-Demand
}
# plot the results of each simulation to compare the change in muscle oxygen content over time
# depending on the input heart rate and activity level
# https://www.datacamp.com/community/tutorials/15-questions-about-r-plots
plot(O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10)) # first simulation results, line colored black
lines(O2, col='red') # second simulation results, line colored red
abline(h=1.2, lty=3) # draw a horizontal line at 1.2 = 1/(273*8.3e3)*1000*100*32; this assumes 100 ml skeletal muscle
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
# model for simulating muscle oxygen content depending on activity level (exercise) and heart rate
# model parameters; https://data-flair.training/blogs/r-vector/
# 1 ml O2 is 1.43 mg O2 at Standard Temperature and Pressure
Oblood = 0.2*1.43 # mg O2 (ml blood)-1
f = 0.7  # maximum fraction of oxygen transfered from blood to tissue
b = 0.0357 # ml blood /(beat 100 ml muscle)-1
Odemand = 0.11*1.43 # mg O2 (100 ml muscle minute)-1
Omax = 10 # max oxygen content in mg O2/100ml
timesteps = 120 # run each simulation for 120 timesteps (minutes)
O = numeric(timesteps) # vector for the results of the simulations of muscle oxygen content
O[1] = 5 # initial oxygen content for the models is 5 mg O2/100ml
# multiple model simulations follow to calculate muscle oxygen content
# with different input heart rates and activity levels for 120 minutes each; https://campus.datacamp.com/courses/intermediate-r-for-finance/loops-3?ex=9
# and an initial muscle oxygen content of 5 mg O2
# muscle oxygen content is updated each minute based on previous muscle oxygen content
# first simulation model inputs
Hrate = 72 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 1 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Demand = Odemand*Alevel
O[i] = O[i-1]+Supply-Demand
}
# second simulation model inputs
O2 = O #results of the second simulation of muscle oxygen content
Hrate = 160 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 2.5 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O2[i-1]/Omax)
Demand = Odemand*Alevel
O2[i] = O2[i-1]+Supply-Demand
}
# plot the results of each simulation to compare the change in muscle oxygen content over time
# depending on the input heart rate and activity level
# https://www.datacamp.com/community/tutorials/15-questions-about-r-plots
plot(O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10)) # first simulation results, line colored black
lines(O2, col='red') # second simulation results, line colored red
abline(h=1.2, lty=3) # draw a horizontal line at 1.2 = 1/(273*8.3e3)*1000*100*32; this assumes 100 ml skeletal muscle
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
# model for simulating muscle oxygen content depending on activity level (exercise) and heart rate
# model parameters; https://data-flair.training/blogs/r-vector/
# 1 ml O2 is 1.43 mg O2 at Standard Temperature and Pressure
Oblood = 0.2*1.43 # mg O2 (ml blood)-1
f = 0.7  # maximum fraction of oxygen transfered from blood to tissue
b = 0.0357 # ml blood /(beat 100 ml muscle)-1
Odemand = 0.11*1.43 # mg O2 (100 ml muscle minute)-1
Omax = 10 # max oxygen content in mg O2/100ml
timesteps = 120 # run each simulation for 120 timesteps (minutes)
O = numeric(timesteps) # vector for the results of the simulations of muscle oxygen content
O[1] = 5 # initial oxygen content for the models is 5 mg O2/100ml
# multiple model simulations follow to calculate muscle oxygen content
# with different input heart rates and activity levels for 120 minutes each; https://campus.datacamp.com/courses/intermediate-r-for-finance/loops-3?ex=9
# and an initial muscle oxygen content of 5 mg O2
# muscle oxygen content is updated each minute based on previous muscle oxygen content
# first simulation model inputs
Hrate = 72 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 1 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Demand = Odemand*Alevel
O[i] = O[i-1]+Supply-Demand
}
# second simulation model inputs
O2 = O #results of the second simulation of muscle oxygen content
Hrate = 175 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 2.5 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O2[i-1]/Omax)
Demand = Odemand*Alevel
O2[i] = O2[i-1]+Supply-Demand
}
# plot the results of each simulation to compare the change in muscle oxygen content over time
# depending on the input heart rate and activity level
# https://www.datacamp.com/community/tutorials/15-questions-about-r-plots
plot(O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10)) # first simulation results, line colored black
lines(O2, col='red') # second simulation results, line colored red
abline(h=1.2, lty=3) # draw a horizontal line at 1.2 = 1/(273*8.3e3)*1000*100*32; this assumes 100 ml skeletal muscle
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
library(readxl)
Bio_Lab_B_gal_Data_Graph <- read_excel("Documents/Bio Lab B-gal Data Graph.xlsx")
View(Bio_Lab_B_gal_Data_Graph)
data<-read.csv("~/Desktop/Rtemplate.csv")
anova<-aov(Value~Strain,data=data)
summary(anova)
?mean
a <- c(1,2,3,4)
a
mean(a)
names <- c("Ann", "Beth", "Rick", "Sue", "Don")
names
names[3]
names[1,2]
names[1:2]
list(names, matrix(c(1:4),nrow=2,ncol=2))
list[names[4:5]]
list[1[4:5]]
list[1]
list1 <- list(names, matrix(c(1:4),nrow=2,ncol=2))
list 1
list1
list1[names[4:5]]
list1[1]
list1[1[4:5]]
list1[1,4:5]
list1[1]
list1[1,4]
list1[2[1,3]
list1[2[1,3]]
list[1]
list1[1]
(list1[1])[4:5]
names[1,3]
names[c(1,3)]
numvec <- c(3,10,4,12,55)
numvecsum <- 0
for(i in numvec){
numvecsum=sumvecsum+i
}
numvec <- c(3,10,4,12,55)
numvecsum <- 0
for(i in numvec){
numvecsum=numvecsum+i
}
numvecsum
numvec <- c(3,10,4,12,55)
numvecsum <- 0
for(i in numvec){
numvecsum=numvecsum+i
sumvec <- c(numvecsum)
}
sumvec
numvec <- c(3,10,4,12,55)
numvecsum <- 0
for(i in numvec){
numvecsum=numvecsum+i
sumvec <- c(numvecsum)
}
numvec <- c(3,10,4,12,55)
numvecsum <- 0
for(i in numvec){
numvecsum=numvecsum+i
sumvec <- c(numvecsum)
}
numvec <- c(3,10,4,12,55)
numvecsum <- 0
sumvec <- 0
for(i in numvec){
numvecsum=numvecsum+i
sumvec <- c(numvecsum)
}
for(i in 1:length(numvec)){
numvecsum=numvecsum+i
sumvec <- c(numvecsum)
}
numvec <- c(3,10,4,12,55)
numvecsum <- 0
sumvec <- 0
for(i in numvec){
numvecsum=numvecsum+i
sumvec[i] <- numvecsum
}
sumvec
numvec <- c(3,10,4,12,55)
numvecsum <- 0
sumvec <- c()
for(i in numvec){
numvecsum=numvecsum+i
sumvec[i] <- numvecsum
}
numvec <- c(3,10,4,12,55)
numvecsum <- 0
sumvec <- numeric(length=length(numvec))
for(i in numvec){
numvecsum=numvecsum+i
sumvec[i] <- numvecsum
}
numvec <- c(3,10,4,12,55)
numvecsum <- 0
sumvec <- numeric(length=length(numvec))
for(i in numvec){
numvecsum=numvecsum+numvec[i]
sumvec[i] <- numvecsum
}
clear
numvec <- c(3,10,4,12,55)
sumvec <- numeric(length=length(numvec))
for(i in 1:length(numvec)){
sumvec[i] <- sum(numvec[1:i])
}
mymean <- function(x){
n=length(x)
total=sum(x)
average=total/n
return(average)
}
vec <- c(1,2,3,4,5,6,7,8,9,10)
mymean(vec)
halfmin(vec)
halfmin <- function(x){
minimum=min(x)
result=minimum/2
return(result)
}
halfmin(vec)
halfminspecial <- function(x,y=2){
minimum=min(x)
result=minimum/y
return(result)
}
halfminspecial(vec)
halfminspecial(vec,1)
halfminspecial(vec,3)
library(ggplot2)
setwd("/Users/benjaminwalter/Desktop/Storage/Biocomputing/BioComp_Tutorial12")
iris <- read.csv("iris.csv", headers=TRUE, stringsAsFactors = FALSE)
iris <- read.csv("iris.csv", header=TRUE, stringsAsFactors = FALSE)
iris
for(measurement in 1:4){
ggplot(data=iris, aes(x=Species, y=measurement,))+
geom_violin(color="black", fill="blue")+
theme_bw()
}
for(measurement in 1:4){
ggplot(data=iris, aes(x=Species, y=iris$measurement,))+
geom_violin(color="black", fill="blue")+
theme_bw()
}
ggplot(data=iris, aes(x=Species, y=iris$measurement))+
geom_violin(color="black", fill="blue")+
theme_bw()
for(measurement in 1:4){
ggplot(data=iris, aes(x=Species, y=iris$measurement))+
geom_violin(color="black", fill="blue")+
theme_bw()
}
for(i in columns(iris)){
ggplot(data=iris, aes(x=Species, y=class(iris$i)))+
geom_violin(color="black", fill="blue")+
theme_bw()
}
for(i in 1:length(iris)){
ggplot(data=iris, aes(x=Species, y=class(iris[,i]))+
geom_violin(color="black", fill="blue")+
theme_bw()
}
for(i in 1:length(iris)){
ggplot(data=iris, aes(x=Species, y=class(iris[,i]))+
geom_violin(color="black", fill="blue")+
theme_bw()
}
for(i in 1:length(iris)){
graph <- ggplot(data=iris, aes(x=Species, y=class(iris[,i]))+
geom_violin(color="black", fill="blue")+
theme_bw()
return(graph)
}
for(i in 1:length(iris)){
ggplot(data=iris, aes(x=Species, y=class(iris[,i]))+
geom_violin(color="black", fill="blue")+
theme_bw()
}
for(i in 1:length(iris)){
ggplot(data=iris, aes(x=iris$Species, y=class(iris[,i]))+
geom_violin(color="black", fill="blue")+
theme_bw()
}
for(i in colnames(iris)){
ggplot(data=iris, aes(x=Species, y=class(iris[i]))+
geom_violin(color="black", fill="blue")+
theme_bw()
}
for(i in colnames(iris)){
ggplot(data=iris, aes(x=Species, y=class(iris[[i]]))+
geom_violin(color="black", fill="blue")+
theme_bw()
}
for(i in colnames(iris)){
ggplot(data=iris, aes(x=Species, y=class(iris[[i]]))+
geom_violin(color="black", fill="blue")+
theme_bw()}
for(i in colnames(iris)){
ggplot(data=iris, aes(x=Species, y=class(iris[[i]]))+
geom_violin(color="black", fill="blue")+
theme_bw()
}
for(i in colnames(iris)){
graph <- ggplot(data=iris, aes(x=Species, y=class(iris[[i]]))+
geom_violin(color="black", fill="blue")+
theme_bw()
graph
}
for(i in colnames(iris)){
graph <- ggplot(data=iris, aes(x=Species, y=class(iris[[i]]))+
geom_violin(color="black", fill="blue")+
theme_bw()
graph
}
for(i in colnames(iris)){
ggplot(data=iris, aes(x=Species, y=class(iris[[i]]))+
geom_violin(color="black", fill="blue")+
theme_bw()
}
for(i in colnames(iris)){
ggplot(data=iris, aes(x=Species, y=class(iris[[i]]))+
geom_violin(color="black", fill="blue")+
theme_bw()
}
for(i in 1:4){
plot= ggplot(data=iris, aes(x=Species, y=class(iris[[i]])))+
geom_violin(color="black", fill="blue")+
theme_bw()
}
for(i in 1:4){
plot= ggplot(data=iris, aes(x=Species, y=iris[,i])+
geom_violin(color="black", fill="blue")+
theme_bw()
}
for(i in 1:4){
plot= ggplot(data=iris, aes(x=Species, y=iris[,i]))+
geom_violin(color="black", fill="blue")+
theme_bw()
}
for(i in 1:4){
plot= ggplot(data=iris, aes(x=Species, y=iris[,i]))+
geom_violin(color="black", fill="blue")+
theme_bw()
plot
}
for(i in 1:4){
plot= ggplot(data=iris, aes(x=Species, y=iris[,i]))+
geom_violin(color="black", fill="blue")+
theme_bw()
return(plot)
}
plot= ggplot(data=iris, aes(x=Species, y=iris[,i]))+
geom_violin(color="black", fill="blue")+
xlab("Species")+
ylab(colnames(iris[,i]))
theme_bw()
plot= ggplot(data=iris, aes(x=Species, y=iris[,1]))+
geom_violin(color="black", fill="blue")+
xlab("Species")+
ylab(colnames(iris[,1]))
theme_bw()
for(i in 1:4){
plot= ggplot(data=iris, aes(x=Species, y=iris[,i]))+
geom_violin(color="black", fill="blue")+
xlab("Species")+
ylab(colnames(iris[,i]))
theme_bw()
print(plot)
}
for(i in 1:4){
plot= ggplot(data=iris, aes(x=Species, y=iris[,i]))+
geom_violin(color="black", fill="blue")+
xlab("Species")+
ylab(colnames(iris)[i])
theme_bw()
print(plot)
}
